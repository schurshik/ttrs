;; ttrs
;; ttrs.scm
;; Developer: Branitskiy Alexander <schurshik@yahoo.com>

(define *ttrs-frame-x-size* 300)

(define *ttrs-frame-y-size* 600)

(define *ttrs-frame-x-left-offset* 6)

(define *ttrs-frame-x-right-offset* 6)

(define *ttrs-frame-y-bottom-offset* 6)

(define *ttrs-frame-y-top-offset* 6)

(define *ttrs-window-x-size* (+ *ttrs-frame-x-size* *ttrs-frame-x-left-offset* *ttrs-frame-x-right-offset*))

(define *ttrs-window-y-size* (+ *ttrs-frame-y-size* *ttrs-frame-y-bottom-offset* *ttrs-frame-y-top-offset*))

(define *ttrs-x-n-cells* 10)

(define *ttrs-y-n-cells* 20)

(define *ttrs-scaled-frame-x-size* 200)

(define *ttrs-scaled-frame-y-size* 400)

(define *ttrs-scaled-fig-cell-x-size* (/ *ttrs-scaled-frame-x-size* *ttrs-x-n-cells*)) ; must be a multiple of *ttrs-scaled-frame-x-size*

(define *ttrs-scaled-fig-cell-y-size* (/ *ttrs-scaled-frame-y-size* *ttrs-y-n-cells*)) ; must be a multiple of *ttrs-scaled-frame-y-size*

(define *ttrs-scaled-frame-x-left-offset* (* *ttrs-frame-x-left-offset* (/ *ttrs-scaled-frame-x-size* *ttrs-frame-x-size*)))

(define *ttrs-scaled-frame-x-right-offset* (* *ttrs-frame-x-right-offset* (/ *ttrs-scaled-frame-x-size* *ttrs-frame-x-size*)))

(define *ttrs-scaled-frame-y-bottom-offset* (* *ttrs-frame-y-bottom-offset* (/ *ttrs-scaled-frame-y-size* *ttrs-frame-y-size*)))

(define *ttrs-scaled-frame-y-top-offset* (* *ttrs-frame-y-top-offset* (/ *ttrs-scaled-frame-y-size* *ttrs-frame-y-size*)))

(define *ttrs-scaled-window-x-left-corner* 0)

(define *ttrs-scaled-window-x-right-corner* (+ *ttrs-scaled-frame-x-size* *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-right-offset*))

(define *ttrs-scaled-window-y-bottom-corner* 0)

(define *ttrs-scaled-window-y-top-corner* (+ *ttrs-scaled-frame-y-size* *ttrs-scaled-frame-y-bottom-offset* *ttrs-scaled-frame-y-top-offset*))

(define (ttrs-draw-primitive-rectangle g-dev x-left y-bottom width height flush fill color)
  (define ret-img false)
  (if fill
      (let* ((img (graphics-operation g-dev 'create-image (* width (/ *ttrs-frame-x-size* *ttrs-scaled-frame-x-size*))
                                      (* height (/ *ttrs-frame-y-size* *ttrs-scaled-frame-y-size*))))
             (color-val (cond ((eq? color 'white)
                               0)
                              ((eq? color 'blue)
                               500)
                              ((eq? color 'green)
                               50000)
                              ((eq? color 'turquoise)
                               185000)
                              ((eq? color 'yellow)
                               12500000)
                              ((eq? color 'red)
                               16000000)
                              ((eq? color 'violet)
                               39000000)
                              ((eq? color 'brown)
                               44000000)
                              (else
                               (error "Incorrect value returned by random"))))
             (pix (make-initialized-vector (* (image/width img) (image/height img)) (lambda (x) color-val))))
        (image/fill-from-byte-vector img pix)
        (graphics-operation g-dev 'draw-image x-left (+ y-bottom height) img)
        (set! ret-img img)))
  (graphics-draw-line g-dev x-left y-bottom x-left (+ y-bottom height))
  (graphics-draw-line g-dev x-left (+ y-bottom height) (+ x-left width) (+ y-bottom height))
  (graphics-draw-line g-dev (+ x-left width) (+ y-bottom height) (+ x-left width) y-bottom)
  (graphics-draw-line g-dev (+ x-left width) y-bottom x-left y-bottom)
  (if flush (graphics-flush g-dev))
  ret-img)

(define (ttrs-destroy-primitive-rectangle img)
  (if img (image/destroy img)))

(define (ttrs-draw-frame g-dev x-left y-bottom width height flush)
  (ttrs-draw-primitive-rectangle g-dev x-left y-bottom width height flush false 'white))

(define (ttrs-make-occupied-cells g-dev)
  (define occupied-cells (make-vector 0))
  (define cell-imgs (make-vector 0))
  (define (init-occupied-cells)
    (let ((n-rows *ttrs-y-n-cells*))
      (set! occupied-cells (make-vector n-rows))
      (do ((i 0 (+ i 1)))
          ((= i n-rows))
        (let ((n-cols *ttrs-x-n-cells*))
          (vector-set! occupied-cells i (make-vector n-cols))
          (do ((j 0 (+ j 1)))
              ((= j n-cols))
            (vector-set! (vector-ref occupied-cells i) j false))))))
  (define (fill-cells coords color)
    (do ((i 0 (+ i 1)))
        ((= i (vector-length coords)))
      (let* ((x-val (list-ref (vector-ref coords i) 0))
             (y-val (list-ref (vector-ref coords i) 1))
             (r (/ (- y-val *ttrs-scaled-frame-y-bottom-offset*) *ttrs-scaled-fig-cell-y-size*))
             (c (/ (- x-val *ttrs-scaled-frame-x-left-offset*) *ttrs-scaled-fig-cell-x-size*)))
        (if (< r (vector-length occupied-cells))
            (vector-set! (vector-ref occupied-cells r) c color)))))
  (define (check-cells? coord)
    (let ((x-val (list-ref coord 0))
          (y-val (list-ref coord 1)))
      (if (and (< y-val (vector-length occupied-cells))
               (< x-val (vector-length (vector-ref occupied-cells y-val))))
          (vector-ref (vector-ref occupied-cells y-val) x-val)
          false)))
  (define (draw-cells flush)
    (do ((i 0 (+ i 1)))
        ((= i (vector-length cell-imgs)))
      (ttrs-destroy-primitive-rectangle (vector-ref cell-imgs i)))
    (set! cell-imgs (make-vector 0))
    (do ((r 0 (+ r 1)))
        ((= r (vector-length occupied-cells)))
      (do ((c 0 (+ c 1)))
          ((= c (vector-length (vector-ref occupied-cells r))))
        (let ((color (vector-ref (vector-ref occupied-cells r) c)))
          (if color
              (let ((x-val (+ (* c *ttrs-scaled-fig-cell-x-size*) *ttrs-scaled-frame-x-left-offset*))
                    (y-val (+ (* r *ttrs-scaled-fig-cell-y-size*) *ttrs-scaled-frame-y-bottom-offset*))
                    (w-val *ttrs-scaled-fig-cell-x-size*)
                    (h-val *ttrs-scaled-fig-cell-y-size*))
                (let ((img (ttrs-draw-primitive-rectangle g-dev x-val y-val w-val h-val false true color)))
                  (set! cell-imgs (vector-grow cell-imgs (+ (vector-length cell-imgs) 1)))
                  (vector-set! cell-imgs (- (vector-length cell-imgs) 1) img)))))))
    (if flush (graphics-flush g-dev)))
  (define (remove-cells flush)
    (let ((n-rows (vector-length occupied-cells)))
      (do ((r 0 (+ r 1)))
          ((>= r n-rows))
        (let ((remove-row true))
          (do ((c 0 (+ c 1)))
              ((= c (vector-length (vector-ref occupied-cells r))))
            (set! remove-row (and remove-row (vector-ref (vector-ref occupied-cells r) c))))
          (if remove-row
              (begin
                (do ((i (+ r 1) (+ i 1)))
                    ((>= i n-rows))
                  (vector-set! occupied-cells (- i 1) (vector-copy (vector-ref occupied-cells i))))
                (let ((n-cols (vector-length (vector-ref occupied-cells (- n-rows 1)))))
                  (vector-set! occupied-cells (- n-rows 1) (make-initialized-vector n-cols (lambda (x) false))))
                (set! r (- r 1)))))))
    (if flush (draw-cells true)))
  (define (manage-occupied-cells action #!optional coords-or-flush color)
    (cond ((eq? action 'fillcells)
           (fill-cells coords-or-flush color))
          ((eq? action 'checkcells)
           (check-cells? coords-or-flush))
          ((eq? action 'drawcells)
           (draw-cells coords-or-flush))
          ((eq? action 'removecells)
           (remove-cells coords-or-flush))
          (else
           (error "Unknown action in manage-figure"))))
  (init-occupied-cells)
  manage-occupied-cells)

; (x-left, y-bottom) - the coordinates of the bottom-left point of the most bottom and left square in the figure
(define (ttrs-make-figure g-dev fig-type x-left y-bottom x-side y-side n-rot occupied-cells color)
  (define fig-cell-coords (make-vector 4))
  (define fig-imgs (make-vector 0))
  (define fig-rot 0)
  (define (init-square-cell-coords)
    (vector-set! fig-cell-coords 0 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 1 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list x-left y-bottom))
    (vector-set! fig-cell-coords 3 (list (+ x-left x-side) y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-square))
    fig-cell-coords)
  (define (init-stick-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list x-left (+ y-bottom (* 3 y-side))))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom (* 2 y-side))))
    (vector-set! fig-cell-coords 2 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list x-left y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-stick))
    fig-cell-coords)
  (define (init-lchair-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list (+ x-left x-side) (+ y-bottom (* 2 y-side))))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list x-left y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-lchair))
    fig-cell-coords)
  (define (init-rchair-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list x-left (+ y-bottom (* 2 y-side))))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list (+ x-left x-side) y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-rchair))
    fig-cell-coords)
  (define (init-ltable-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list (- x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list (- x-left x-side) y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-ltable))
    fig-cell-coords)
  (define (init-rtable-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list (- x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list (+ x-left x-side) y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-rtable))
    fig-cell-coords)
  (define (init-mtable-cell-coords n-rot)
    (vector-set! fig-cell-coords 0 (list (- x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 1 (list x-left (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 2 (list (+ x-left x-side) (+ y-bottom y-side)))
    (vector-set! fig-cell-coords 3 (list x-left y-bottom))
    (do ((i 0 (+ i 1)))
        ((= i n-rot))
      (try-rotate-mtable))
    fig-cell-coords)
  (define (init-figure fig-type n-rot)
    (cond ((eq? fig-type 'square)
           (init-square-cell-coords))
          ((eq? fig-type 'stick)
           (init-stick-cell-coords n-rot))
          ((eq? fig-type 'lchair)
           (init-lchair-cell-coords n-rot))
          ((eq? fig-type 'rchair)
           (init-rchair-cell-coords n-rot))
          ((eq? fig-type 'ltable)
           (init-ltable-cell-coords n-rot))
          ((eq? fig-type 'rtable)
           (init-rtable-cell-coords n-rot))
          ((eq? fig-type 'mtable)
           (init-mtable-cell-coords n-rot))
          (else
           (error "Unknown fig-type in init-figure"))))
  (define (check-figure? fig-cells x-lam y-lam)
    (let ((c false))
      (do ((i 0 (+ i 1)))
          ((= i (vector-length fig-cells)))
        (let* ((x-val (list-ref (vector-ref fig-cells i) 0))
               (y-val (list-ref (vector-ref fig-cells i) 1))
               (x-ind (floor->exact (/ (- x-val *ttrs-scaled-frame-x-left-offset*) *ttrs-scaled-fig-cell-x-size*)))
               (y-ind (floor->exact (/ (- y-val *ttrs-scaled-frame-y-bottom-offset*) *ttrs-scaled-fig-cell-y-size*))))
          (set! c (or c (occupied-cells 'checkcells (list (x-lam x-ind) (y-lam y-ind)))))))
      c))
  (define (find-border-coord fig-cells pos)
    (let ((p false))
      (do ((i 0 (+ i 1)))
          ((= i (vector-length fig-cells)))
        (let* ((val (vector-ref fig-cells i))
               (x-val (list-ref val 0))
               (y-val (list-ref val 1)))
          (cond ((eq? pos 'bottom)
                 (set! p (if (or (not p) (< y-val (second p))) val p)))
                ((eq? pos 'left)
                 (set! p (if (or (not p) (< x-val (first p))) val p)))
                ((eq? pos 'right)
                 (set! p (if (or (not p) (> x-val (first p))) val p)))
                (else
                 (error "Unknown action in find-border-coord")))))
      p))
  (define (draw-figure flush)
    (do ((i 0 (+ i 1)))
        ((= i (vector-length fig-imgs)))
      (ttrs-destroy-primitive-rectangle (vector-ref fig-imgs i)))
    (set! fig-imgs (make-vector 0))
    (do ((i 0 (+ i 1)))
        ((= i (vector-length fig-cell-coords)))
      (let ((x-val (list-ref (vector-ref fig-cell-coords i) 0))
            (y-val (list-ref (vector-ref fig-cell-coords i) 1)))
        (let ((img (ttrs-draw-primitive-rectangle g-dev x-val y-val x-side y-side false true color)))
          (set! fig-imgs (vector-grow fig-imgs (+ (vector-length fig-imgs) 1)))
          (vector-set! fig-imgs (- (vector-length fig-imgs) 1) img))))
    (if flush (graphics-flush g-dev)))
  (define (draw-all flush)
    (graphics-clear g-dev)
    (ttrs-draw-frame g-dev *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-y-bottom-offset*
                     *ttrs-scaled-frame-x-size* *ttrs-scaled-frame-y-size* false)
    (draw-figure false)
    (occupied-cells 'drawcells flush))
  (define (full-displayed?)
    (let ((is-above false))
      (do ((i 0 (+ i 1)))
          ((= i (vector-length fig-cell-coords)))
        (let ((y-val (list-ref (vector-ref fig-cell-coords i) 1)))
          (if (>= y-val *ttrs-scaled-window-y-top-corner*)
              (set! is-above true))))
      (not is-above)))
  (define (move-figure direction)
    (cond ((eq? direction 'movedown)
           (if (and (>= (- (second (find-border-coord fig-cell-coords 'bottom)) y-side) *ttrs-scaled-frame-y-bottom-offset*)
                    (not (check-figure? fig-cell-coords (lambda (x) x) (lambda (y) (- y 1)))))
               (begin (set! y-bottom (- y-bottom y-side))
                      (do ((i 0 (+ i 1)))
                          ((= i (vector-length fig-cell-coords)))
                        (let ((y-val (- (list-ref (vector-ref fig-cell-coords i) 1) y-side)))
                          (list-set! (vector-ref fig-cell-coords i) 1 y-val)))
                      true)
               (begin
                 (occupied-cells 'fillcells fig-cell-coords color)
                 false)))
          ((eq? direction 'moveleft)
           (if (and (>= (- (first (find-border-coord fig-cell-coords 'left)) x-side) *ttrs-scaled-frame-x-left-offset*)
                    (not (check-figure? fig-cell-coords (lambda (x) (- x 1)) (lambda (y) y))))
               (begin (set! x-left (- x-left x-side))
                      (do ((i 0 (+ i 1)))
                          ((= i (vector-length fig-cell-coords)))
                        (let ((x-val (- (list-ref (vector-ref fig-cell-coords i) 0) x-side)))
                          (list-set! (vector-ref fig-cell-coords i) 0 x-val)))
                      true)
               false))
          ((eq? direction 'moveright)
           (if (and (<= (+ (first (find-border-coord fig-cell-coords 'right)) (* 2 x-side)) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
                    (not (check-figure? fig-cell-coords (lambda (x) (+ x 1)) (lambda (y) y))))
               (begin (set! x-left (+ x-left x-side))
                      (do ((i 0 (+ i 1)))
                          ((= i (vector-length fig-cell-coords)))
                        (let ((x-val (+ (list-ref (vector-ref fig-cell-coords i) 0) x-side)))
                          (list-set! (vector-ref fig-cell-coords i) 0 x-val)))
                      true)
               false))
          (else
           (error "Unknown direction in move-figure"))))
  (define (try-rotate-square) ;; rotate clockwise
    true)
  (define (try-rotate-stick)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((or (= new-fig-rot 0) (= new-fig-rot 2))
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                         (+ y-right-point (* (if (= new-fig-rot 0) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                         (+ y-right-point (if (= new-fig-rot 0) 0 y-side))))
               (vector-set! new-fig-cell-coords 2 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                         (- y-right-point (if (= new-fig-rot 0) y-side 0))))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                         (- y-right-point (* (if (= new-fig-rot 0) 2 1) y-side))))))
            ((or (= new-fig-rot 1) (= new-fig-rot 3))
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-bottom-point (* (if (= new-fig-rot 1) 2 1) x-side))
                                                         (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-bottom-point (if (= new-fig-rot 1) x-side 0))
                                                         (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 2 (list (+ x-bottom-point (if (= new-fig-rot 1) 0 x-side))
                                                         (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 3 (list (+ x-bottom-point (* (if (= new-fig-rot 1) 1 2) x-side))
                                                         (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))))
            (else
             (error "Unknown new-fig-rot in try-rotate-stick")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (try-rotate-lchair)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((or (= new-fig-rot 0) (= new-fig-rot 2))
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (if (= new-fig-rot 0) 0 x-side))
                                                        (+ y-right-point (* (if (= new-fig-rot 0) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                        (+ y-right-point (if (= new-fig-rot 0) 0 y-side))))
               (vector-set! new-fig-cell-coords 2 (list (- x-right-point (if (= new-fig-rot 0) 0 x-side))
                                                        (+ y-right-point (if (= new-fig-rot 0) 0 y-side))))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                        (- y-right-point (if (= new-fig-rot 0) y-side 0))))))
            ((or (= new-fig-rot 1) (= new-fig-rot 3))
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-bottom-point (if (= new-fig-rot 1) x-side 0))
                                                        (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 1 (list (+ x-bottom-point (if (= new-fig-rot 1) 0 x-side))
                                                        (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 2 (list (+ x-bottom-point (if (= new-fig-rot 1) 0 x-side))
                                                        (+ y-bottom-point (if (= new-fig-rot 1) 0 y-side))))
               (vector-set! new-fig-cell-coords 3 (list (+ x-bottom-point (* (if (= new-fig-rot 1) 1 2) x-side))
                                                        (+ y-bottom-point (if (= new-fig-rot 1) 0 y-side))))))
            (else
             (error "Unknown new-fig-rot in try-rotate-lchair")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (try-rotate-rchair)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((or (= new-fig-rot 0) (= new-fig-rot 2))
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                        (+ y-right-point (if (= new-fig-rot 0) 0 y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point (* (if (= new-fig-rot 0) 1 2) x-side))
                                                        (- y-right-point (if (= new-fig-rot 0) y-side 0))))
               (vector-set! new-fig-cell-coords 2 (list (- x-right-point (if (= new-fig-rot 0) 0 x-side))
                                                        (- y-right-point (if (= new-fig-rot 0) y-side 0))))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point (if (= new-fig-rot 0) 0 x-side))
                                                        (- y-right-point (* (if (= new-fig-rot 0) 2 1) y-side))))))
            ((or (= new-fig-rot 1) (= new-fig-rot 3))
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-bottom-point (if (= new-fig-rot 1) x-side 0))
                                                        (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 1 (list (+ x-bottom-point (if (= new-fig-rot 1) 0 x-side))
                                                        (+ y-bottom-point (* (if (= new-fig-rot 1) 1 2) y-side))))
               (vector-set! new-fig-cell-coords 2 (list (- x-bottom-point (* (if (= new-fig-rot 1) 2 1) x-side))
                                                        (+ y-bottom-point (if (= new-fig-rot 1) 0 y-side))))
               (vector-set! new-fig-cell-coords 3 (list (- x-bottom-point (if (= new-fig-rot 1) x-side 0))
                                                        (+ y-bottom-point (if (= new-fig-rot 1) 0 y-side))))
               ))
            (else
             (error "Unknown new-fig-rot in try-rotate-rchair")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (try-rotate-ltable)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((= new-fig-rot 0)
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (* 2 x-side)) (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point x-side) (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list x-right-point (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point (* 2 x-side)) y-right-point))))
            ((= new-fig-rot 1)
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list x-bottom-point (+ y-bottom-point (* 2 y-side))))
               (vector-set! new-fig-cell-coords 1 (list (+ x-bottom-point x-side) (+ y-bottom-point (* 2 y-side))))
               (vector-set! new-fig-cell-coords 2 (list (+ x-bottom-point x-side) (+ y-bottom-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list (+ x-bottom-point x-side) y-bottom-point))))
            ((= new-fig-rot 2)
             (let* ((left-point (find-border-coord new-fig-cell-coords 'left))
                    (x-left-point (first left-point))
                    (y-left-point (second left-point)))
               (vector-set! new-fig-cell-coords 0 (list (+ x-left-point (* 2 x-side)) y-left-point))
               (vector-set! new-fig-cell-coords 1 (list x-left-point (- y-left-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list (+ x-left-point x-side) (- y-left-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list (+ x-left-point (* 2 x-side)) (- y-left-point y-side)))))
            ((= new-fig-rot 3)
             (let* ((left-point (find-border-coord new-fig-cell-coords 'left))
                    (x-left-point (first left-point))
                    (y-left-point (second left-point)))
               (vector-set! new-fig-cell-coords 0 (list (+ x-left-point x-side) (+ y-left-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list (+ x-left-point x-side) y-left-point))
               (vector-set! new-fig-cell-coords 2 (list (+ x-left-point x-side) (- y-left-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list (+ x-left-point (* 2 x-side)) (- y-left-point y-side)))))
            (else
             (error "Unknown new-fig-rot in try-rotate-ltable")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (try-rotate-rtable)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((= new-fig-rot 0)
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (* 2 x-side)) (- y-right-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point x-side) (- y-right-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list x-right-point (- y-right-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list x-right-point (- y-right-point (* 2 y-side))))))
            ((= new-fig-rot 1)
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-bottom-point x-side) (+ y-bottom-point (* 2 y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-bottom-point x-side) (+ y-bottom-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list (- x-bottom-point (* 2 x-side)) y-bottom-point))
               (vector-set! new-fig-cell-coords 3 (list (- x-bottom-point x-side) y-bottom-point))))
            ((= new-fig-rot 2)
             (let* ((left-point (find-border-coord new-fig-cell-coords 'left))
                    (x-left-point (first left-point))
                    (y-left-point (second left-point)))
               (vector-set! new-fig-cell-coords 0 (list x-left-point (+ y-left-point (* 2 y-side))))
               (vector-set! new-fig-cell-coords 1 (list x-left-point (+ y-left-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list (+ x-left-point x-side) (+ y-left-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list (+ x-left-point (* 2 x-side)) (+ y-left-point y-side)))))
            ((= new-fig-rot 3)
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point x-side) (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list x-right-point (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list (- x-right-point x-side) y-right-point))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point x-side) (- y-right-point y-side)))))
            (else
             (error "Unknown new-fig-rot in try-rotate-rtable")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (try-rotate-mtable)
    (let ((new-fig-cell-coords (vector-copy fig-cell-coords))
          (new-fig-rot (remainder (+ fig-rot 1) 4)))
      (cond ((= new-fig-rot 0)
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point (* 2 x-side)) y-right-point))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point x-side) y-right-point))
               (vector-set! new-fig-cell-coords 2 (list x-right-point y-right-point))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point x-side) (- y-right-point y-side)))))
            ((= new-fig-rot 1)
             (let* ((bottom-point (find-border-coord new-fig-cell-coords 'bottom))
                    (x-bottom-point (first bottom-point))
                    (y-bottom-point (second bottom-point)))
               (vector-set! new-fig-cell-coords 0 (list x-bottom-point (+ y-bottom-point (* 2 y-side))))
               (vector-set! new-fig-cell-coords 1 (list (- x-bottom-point x-side) (+ y-bottom-point y-side)))
               (vector-set! new-fig-cell-coords 2 (list x-bottom-point (+ y-bottom-point y-side)))
               (vector-set! new-fig-cell-coords 3 (list x-bottom-point y-bottom-point))))
            ((= new-fig-rot 2)
             (let* ((left-point (find-border-coord new-fig-cell-coords 'left))
                    (x-left-point (first left-point))
                    (y-left-point (second left-point)))
               (vector-set! new-fig-cell-coords 0 (list (+ x-left-point x-side) (+ y-left-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list x-left-point y-left-point y-side))
               (vector-set! new-fig-cell-coords 2 (list (+ x-left-point x-side) y-left-point))
               (vector-set! new-fig-cell-coords 3 (list (+ x-left-point (* 2 x-side)) y-left-point))))
            ((= new-fig-rot 3)
             (let* ((right-point (find-border-coord new-fig-cell-coords 'right))
                    (x-right-point (first right-point))
                    (y-right-point (second right-point)))
               (vector-set! new-fig-cell-coords 0 (list (- x-right-point x-side) (+ y-right-point y-side)))
               (vector-set! new-fig-cell-coords 1 (list (- x-right-point x-side) y-right-point))
               (vector-set! new-fig-cell-coords 2 (list x-right-point y-right-point))
               (vector-set! new-fig-cell-coords 3 (list (- x-right-point x-side) (- y-right-point y-side)))))
            (else
             (error "Unknown new-fig-rot in try-rotate-mtable")))
      (if (and (>= (second (find-border-coord new-fig-cell-coords 'bottom)) *ttrs-scaled-frame-y-bottom-offset*)
               (>= (first (find-border-coord new-fig-cell-coords 'left)) *ttrs-scaled-frame-x-left-offset*)
               (<= (+ (first (find-border-coord new-fig-cell-coords 'right)) x-side) (+ *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-x-size*))
               (not (check-figure? new-fig-cell-coords (lambda (x) x) (lambda (y) y))))
          (begin
            (set! fig-cell-coords (vector-copy new-fig-cell-coords))
            (set! fig-rot new-fig-rot)
            true)
          false)))
  (define (rotate-figure)
    (cond ((eq? fig-type 'square)
           (try-rotate-square))
          ((eq? fig-type 'stick)
           (try-rotate-stick))
          ((eq? fig-type 'lchair)
           (try-rotate-lchair))
          ((eq? fig-type 'rchair)
           (try-rotate-rchair))
          ((eq? fig-type 'ltable)
           (try-rotate-ltable))
          ((eq? fig-type 'rtable)
           (try-rotate-rtable))
          ((eq? fig-type 'mtable)
           (try-rotate-mtable))
          (else
           (error "Unknown fig-type in rotate-figure"))))
  (define (manage-figure action)
    (cond ((eq? action 'drawfig)
           (draw-figure))
          ((eq? action 'drawall)
           (draw-all true))
          ((eq? action 'fulldisplayed)
           (full-displayed?))
          ((or (eq? action 'movedown)
               (eq? action 'moveleft)
               (eq? action 'moveright))
           (move-figure action))
          ((eq? action 'rotate)
           (rotate-figure))
          (else
           (error "Unknown action in manage-figure"))))
  (init-figure fig-type n-rot)
  manage-figure)

(let ((graphics-device (make-graphics-device (if (graphics-type-available? 'X) 'X (car (enumerate-graphics-types))))))
  (graphics-clear graphics-device)
  (x-graphics/set-window-name graphics-device "ttrs")
  (x-graphics/resize-window graphics-device *ttrs-window-x-size* *ttrs-window-y-size*)
  (graphics-set-coordinate-limits graphics-device *ttrs-scaled-window-x-left-corner* *ttrs-scaled-window-y-bottom-corner*
                                  *ttrs-scaled-window-x-right-corner* *ttrs-scaled-window-y-top-corner*)
  (ttrs-draw-frame graphics-device *ttrs-scaled-frame-x-left-offset* *ttrs-scaled-frame-y-bottom-offset*
                   *ttrs-scaled-frame-x-size* *ttrs-scaled-frame-y-size* true)
  (x-graphics/select-user-events graphics-device #x5dff)
  ;; (x-graphics/enable-keyboard-focus graphics-device)
  (x-graphics/set-input-hint graphics-device true)
  (graphics-flush graphics-device)
  (graphics-enable-buffering graphics-device)
  (let ((occupied-cells (ttrs-make-occupied-cells graphics-device))
        (x-fig (+ *ttrs-scaled-frame-x-left-offset* (/ *ttrs-scaled-frame-x-size* 2)))
        (y-fig (+ *ttrs-scaled-frame-y-bottom-offset* *ttrs-scaled-frame-y-size*))
        (w-fig *ttrs-scaled-fig-cell-x-size*)
        (h-fig *ttrs-scaled-fig-cell-y-size*))
    (let ((create-new-fig (lambda ()
                            (let* ((rand-val (random 7))
                                   (fig-type (cond ((= rand-val 0)
                                                    'square)
                                                   ((= rand-val 1)
                                                    'stick)
                                                   ((= rand-val 2)
                                                    'lchair)
                                                   ((= rand-val 3)
                                                    'rchair)
                                                   ((= rand-val 4)
                                                    'ltable)
                                                   ((= rand-val 5)
                                                    'rtable)
                                                   ((= rand-val 6)
                                                    'mtable)
                                                   (else
                                                    (error "Incorrect value returned by random"))))
                                   (color (cond ((= rand-val 0)
                                                 'blue)
                                                ((= rand-val 1)
                                                 'green)
                                                ((= rand-val 2)
                                                 'turquoise)
                                                ((= rand-val 3)
                                                 'yellow)
                                                ((= rand-val 4)
                                                 'red)
                                                ((= rand-val 5)
                                                 'violet)
                                                ((= rand-val 6)
                                                 'brown)
                                                (else
                                                 (error "Incorrect value returned by random"))))
                                   (n-rot (random 4)))
                              (ttrs-make-figure graphics-device fig-type x-fig y-fig w-fig h-fig n-rot occupied-cells color)))))
      (let ((fig (create-new-fig))
            (interrupt-thread false)
            (pause-thread false)
            (game-over false))
        (let ((thread (create-thread #f (lambda ()
                                          (letrec ((loop-timer
                                                    (lambda ()
                                                      (sleep-current-thread 1000)
                                                      (if (not interrupt-thread)
                                                          (if (not pause-thread)
                                                              (begin
                                                                (let ((res (fig 'movedown)))
                                                                  (fig 'drawall)
                                                                  (if (not res)
                                                                      (if (not (fig 'fulldisplayed))
                                                                          (begin
                                                                            (write-line "game over")
                                                                            (write-line "press any key to exit")
                                                                            (set! game-over true))
                                                                          (begin
                                                                            (occupied-cells 'removecells true)
                                                                            (set! fig (create-new-fig))
                                                                            (loop-timer)))
                                                                      (loop-timer))))
                                                              (loop-timer))
                                                          (write-line "exit from thread")))))
                                            (loop-timer))))))
          (let loop-event ()
            (let ((evt (x-graphics/read-user-event graphics-device)))
              (write-line evt)
              (write-line (vector-ref evt 0))
              (let ((window-closed-evt 10)
                    (key-pressed-evt 6)
                    (key-pressed-down 65364)
                    (key-pressed-up 65362)
                    (key-pressed-left 65361)
                    (key-pressed-right 65363)
                    (key-pressed-space 32))
                (if (and (not (eq? (vector-ref evt 0) window-closed-evt))
                         (not (and (eq? (vector-ref evt 0) key-pressed-evt)
                                   (equal? (vector-ref evt 2) "q")))
                         (not game-over))
                    (begin
                      (if (eq? (vector-ref evt 0) key-pressed-evt)
                          (let ((pressed-key-code (vector-ref evt 4)))
                            (cond ((eq? pressed-key-code key-pressed-down)
                                   (if (not pause-thread)
                                       (begin
                                         (fig 'movedown)
                                         (fig 'drawall))))
                                  ((eq? pressed-key-code key-pressed-up)
                                   (if (not pause-thread)
                                       (begin
                                         (fig 'rotate)
                                         (fig 'drawall))))
                                  ((eq? pressed-key-code key-pressed-left)
                                   (if (not pause-thread)
                                       (begin
                                         (fig 'moveleft)
                                         (fig 'drawall))))
                                  ((eq? pressed-key-code key-pressed-right)
                                   (if (not pause-thread)
                                       (begin
                                         (fig 'moveright)
                                         (fig 'drawall))))
                                  ((eq? pressed-key-code key-pressed-space)
                                   (set! pause-thread (not pause-thread)))
                                  (else
                                   (write-line "unknown")))))
                      (x-graphics/discard-events graphics-device)
                      (loop-event))
                    (set! interrupt-thread true)))))
          (write-line "exit from application")
          (join-thread thread (lambda (t v) (write-line "join-thread"))))))))
